#!/usr/bin/env python3
"""
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö Maze Visualization
Example usage of the Maze Visualization System
"""

import os
import subprocess
from maze_visualizer import MazeVisualizer

def main():
    print("üó∫Ô∏è Maze Visualization System - Example Usage")
    print("=" * 50)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    test_file = "test_maze_data.json"
    output_file = "example_output.png"
    
    if not os.path.exists(test_file):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {test_file}")
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏™‡∏≥‡∏£‡∏ß‡∏à‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå test_maze_data.json")
        return
    
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á visualizer
        print(f"üìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: {test_file}")
        visualizer = MazeVisualizer(test_file)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        print("üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•...")
        visualizer.create_visualization(
            save_file=output_file,
            show_path=True,
            show_visit_counts=True,
            show_dead_ends=True
        )
        
        print("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û: {output_file}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        metadata = visualizer.maze_data['metadata']
        print("\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à:")
        print(f"   üèÉ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏£‡∏ß‡∏à: {metadata['total_nodes_explored']}")
        print(f"   üó∫Ô∏è ‡∏Ç‡∏ô‡∏≤‡∏î grid: {metadata['boundaries']['width']}√ó{metadata['boundaries']['height']}")
        print(f"   üß± ‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö: {len(visualizer.maze_data['walls'])}")
        print(f"   üõ§Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á: {len(visualizer.maze_data['robot_path'])} ‡∏à‡∏∏‡∏î")
        
        # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        print("\nüí° ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ:")
        print("   python3 maze_visualizer.py test_maze_data.json --save output.png")
        print("   python3 maze_visualizer.py test_maze_data.json --no-path")
        print("   python3 maze_visualizer.py test_maze_data.json --no-visits")
        print("   python3 maze_visualizer.py maze_data.json  # ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏±‡∏ô‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()