#!/usr/bin/env python3
"""
üó∫Ô∏è Quick Maze Plotter - ‡∏û‡∏•‡∏≠‡∏ï‡∏£‡∏π‡∏õ‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏ü‡∏•‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
Quick maze visualization and auto-save script
"""

import os
import sys
from datetime import datetime
from maze_visualizer import quick_visualize, MazeVisualizer

def plot_maze_now(json_file=None):
    """
    ‡∏û‡∏•‡∏≠‡∏ï‡∏£‡∏π‡∏õ‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏ü‡∏•‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    Plot maze and save to computer immediately
    """
    print("üöÄ === QUICK MAZE PLOTTER ===")
    print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏ü‡∏•‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á...")
    print("Creating maze visualization and saving to computer...")
    
    # ‡πÉ‡∏ä‡πâ quick_visualize function
    output_file = quick_visualize(json_file)
    
    if output_file:
        print(f"\n‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ã‡∏ü‡πÅ‡∏•‡πâ‡∏ß:")
        print(f"‚úÖ Success! Image file saved:")
        print(f"üìÅ {os.path.abspath(output_file)}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå
        file_size = os.path.getsize(output_file)
        print(f"üìä File size: {file_size:,} bytes ({file_size/1024:.1f} KB)")
        
        return output_file
    else:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡πÑ‡∏î‡πâ")
        print("‚ùå Failed to create visualization")
        return None

def plot_all_available():
    """
    ‡∏û‡∏•‡∏≠‡∏ï‡∏ó‡∏∏‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ó‡∏µ‡πà‡∏°‡∏µ
    Plot all available JSON files
    """
    json_files = []
    
    # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå JSON ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    for file in os.listdir('.'):
        if file.endswith('.json') and ('maze' in file.lower() or 'data' in file.lower()):
            json_files.append(file)
    
    if not json_files:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡∏≤‡∏ß‡∏á‡∏Å‡∏ï")
        print("‚ùå No maze data files found")
        return
    
    print(f"üìÇ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(json_files)} ‡πÑ‡∏ü‡∏•‡πå:")
    print(f"üìÇ Found {len(json_files)} data files:")
    
    results = []
    for json_file in json_files:
        print(f"\nüîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {json_file}")
        print(f"üîÑ Processing: {json_file}")
        
        output_file = plot_maze_now(json_file)
        if output_file:
            results.append((json_file, output_file))
    
    print(f"\nüéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ {len(results)} ‡∏£‡∏π‡∏õ:")
    print(f"üéâ Complete! Created {len(results)} visualizations:")
    for json_file, output_file in results:
        print(f"   üìä {json_file} -> {output_file}")

def main():
    """Main function"""
    if len(sys.argv) > 1:
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ü‡∏•‡πå
        json_file = sys.argv[1]
        plot_maze_now(json_file)
    else:
        # ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ü‡∏•‡πå - ‡πÉ‡∏´‡πâ auto-detect
        print("üîç Auto-detecting maze data files...")
        
        # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
        standard_files = ['maze_data.json', 'test_maze_data.json']
        found_file = None
        
        for file in standard_files:
            if os.path.exists(file):
                found_file = file
                break
        
        if found_file:
            print(f"üìÇ Found: {found_file}")
            plot_maze_now(found_file)
        else:
            print("üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏∑‡πà‡∏ô...")
            print("üîç Standard files not found, looking for other files...")
            plot_all_available()

if __name__ == '__main__':
    main()